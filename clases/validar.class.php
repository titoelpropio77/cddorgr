<?PHPclass VALIDADOR {    var $mensaje;    function VALIDADOR() {        $this->mensaje = "";    }    function validar($valores = "") {        $numero = count($valores);        $ban = true;        for ($i = 0; $i < $numero; $i++) {            if ($valores[$i]['requerido']) {                if (trim($valores[$i]['valor']) <> "") {                    if (!($this->verificar($valores[$i]['valor'], $valores[$i]['tipo']))) {                        $this->mensaje.="<li>El valor ingresado en el campo <b>" . $valores[$i]['etiqueta'] . "</b> no es valido</li>";                        $ban = false;                    }                } else {                    $this->mensaje.="<li>El campo <b>" . $valores[$i]['etiqueta'] . "</b> es requerido</li>";                    $ban = false;                }            } else {                if (trim($valores[$i]['valor']) <> "") {                    if (!($this->verificar($valores[$i]['valor'], $valores[$i]['tipo']))) {                        $this->mensaje.="<li>El valor ingresado en el campo <b>" . $valores[$i]['etiqueta'] . "</b> no es valido</li>";                        $ban = false;                    }                }            }        }        if ($this->mensaje <> "") {            $this->mensaje = '<ul class="msLista">' . $this->mensaje . '</ul>';        }        return $ban;    }    function verificar($valor, $tipo) {        $exp = $this->expresion_regular($tipo);        if (trim($exp) <> "") {            if (ereg($exp, $valor)) {                return true;            } else {                return false;            }        } else {            return true;        }    }    function expresion_regular($tipo) {        switch ($tipo) {            //solo texto            case 'texto': {                    $exp = "^[A-Za-z'][a-zA-Z .'ñÑ]*$";                    break;                }            //solo numeros            case 'numero': {                    $exp = '^[0-9][0-9]*$';                    break;                }            //solo reales            case 'real': {                    $exp = '^[0-9]+([.]{0,1})[0-9]*$';                    break;                }            //solo fecha            case 'fecha': {                    $exp = '^[0-9][0-9][0-9][0-9]-([0][1-9]|[1][0-2])-[0-3][0-9]$';                    break;                }            //solo mail's            case 'mail': {                    $exp = '^([a-zA-Z0-9_.-])+@(([a-z0-9_]|-)+.)+[a-z]{2,4}$';                    break;                }            default: {                    $exp = '';                    break;                }        }        return $exp;    }    function validar_periodo($fecha,$etiqueta) {        $ges_id = $_SESSION['ges_id'];                $condicion = "pdo_ges_id=$ges_id and '$fecha'>=pdo_fecha_inicio and '$fecha'<=pdo_fecha_fin and pdo_eliminado='No' and pdo_estado='Abierto' ";                $periodo = FUNCIONES::objetos_bd("con_periodo", $condicion);        if ($periodo->get_num_registros() > 0) {            $cambios = FUNCIONES::objetos_bd("con_tipo_cambio", "tca_fecha='$fecha' and tca_eliminado='No'");            if ($cambios->get_num_registros() > 0) {                return true;            } else {                $this->mensaje.="La <b>" . $etiqueta . "</b> seleccionada no tiene tipos de cambio asignados<br>";                return false;            }                    } else {            $this->mensaje.="La <b>" . $etiqueta . "</b> seleccionada no pertenece a ningun periodo activo en esta Gestion<br>";                        return false;        }    }        };?>